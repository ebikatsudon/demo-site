[{"id":0,"href":"/docs/optional-understanding-hugo/","title":"Optional: Understanding Hugo","section":"Docs","content":"\rUnderstanding Hugo and static site generators\r#\rThe following information isn\u0026rsquo;t necessary for installing Hugo, but may be interesting for anyone who plans on deepening their understanding of site generators and what\u0026rsquo;s happening in the backend of their site.\nHugo is a static site generator (abbreviated SSG), meaning it creates web pages with fixed, hard-coded (hence static) content that will not change unless the source code is changed. Each page on a static site is represented by an .html file on the server, and any given page will look the same to every person who accesses it.\nIn comparison, dynamic site generators (such as Wordpress) rely on server-side languages and databases to display varying content in real time. This content can change based on different factors, such as time of day when the site is accessed or user interactions. The custom \u0026ldquo;For You\u0026rdquo; page on social media sites like X or Instagram, for example, are dynamic pages.\nSSGs like Hugo work by converting plain text files to static site assets (HTML, CSS, or JavaScript files) using a template. When accessing a static site, the resulting web page is pre-rendered, cached, and served to the user. This results in faster load times, improved security (no dynamic content or databases that could be hacked), and less maintenance required.\nWith that high-level overview out of the way, let\u0026rsquo;s get started on using Hugo to create your own static site.\n"},{"id":1,"href":"/docs/creating-your-hugo-site/","title":"Creating Your Hugo Site","section":"Docs","content":"\rStep 1: Set up your Hugo file directory\r#\rBefore installing Hugo, set up the directory in whichCreate a folder named bin in your user directory such that the file path is C:\\Users\\YOUR_USERNAME\\bin. You\u0026rsquo;ll want to add this new bin folder to your system\u0026rsquo;s PATH environment variable now so that when you run Hugo commands later, you won\u0026rsquo;t have to specify the entire path every time.\nWhenever you edit your PATH, however, it\u0026rsquo;s recommended to first create a backup:\nNavigate to System Properties -\u0026gt; Advanced system settings -\u0026gt; Advanced tab -\u0026gt; Environment Variables. Select the PATH variable under \u0026ldquo;System Variables.\u0026rdquo; Click \u0026ldquo;Edit,\u0026rdquo; then \u0026ldquo;Edit text.\u0026rdquo; Copy the entire value in \u0026ldquo;Variable value\u0026rdquo; and paste it into a text file editor such as Notepad. Save the file. If you need to restore the PATH, you can copy+paste the text back into the \u0026ldquo;Variable value.\u0026rdquo; Now that your PATH is backed up, open the command line as administrator. To add your newly-created bin folder to the PATH, run the following: setx PATH \u0026quot;C:\\Users\\YOUR_USERNAME\\bin;%PATH%\u0026quot;. You can check if the directory was added successfully by running echo %PATH%, which will output the full value.\nStep 2: Download and install Hugo\r#\rNow that you\u0026rsquo;ve created the directory for Hugo, it\u0026rsquo;s time to actually download and install it. There are two main ways to install Hugo:\nUse a package manager such as Chocolatey or Scoop to handle the whole installation process for you Manually download and install Hugo from the official Github repository To minimize the amount of programs you need to deal with, this guide will only cover the manual installation method. For a comprehensive step-by-step guide on installing Hugo via a package manager, Bryce Wray has a great writeup on his site.\nNote: When downloading Hugo, it\u0026rsquo;s almost always recommended to get the extended version.\nDownload the extended version of Hugo from the repository and extract its contents. Then move the hugo.exe file to the bin folder you created in the previous step.\nStep 3: Check that your installation was successful\r#\rTo confirm that Hugo is now in the PATH, run the following in the command line: hugo version. The output should show the version of Hugo you installed.\nHere\u0026rsquo;s an example output:\nhugo v0.142.0-1f746a872442e66b6afd47c8c04ac42dc92cdb6f+extended windows/amd64 BuildDate=2025-01-22T12:20:52Z VendorInfo=gohugoio Step 4: Initialize your Hugo site\r#\rNow that Hugo is installed, you can start creating your new website. In this tutorial we\u0026rsquo;ll call the new site demo-site, but you can name it however you like.\nTo create your Hugo site, open Git and run the following: hugo new site demo-site.\nIf the site is created successfully, you\u0026rsquo;ll get a message instructing you to install a theme as your next step.\nPS C:\\Users\\Username\u0026gt; hugo new site demo-site Congratulations! Your new Hugo site was created in C:\\Users\\shini\\demo-site. Just a few more steps... 1. Change the current directory to C:\\Users\\Username\\demo-site. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. Now, run git init to create an empty Git repository in your site directory.\n"},{"id":2,"href":"/docs/adding-content-pages/","title":"Adding Content Pages","section":"Docs","content":"this is another test line\n"}]