[{"id":0,"href":"/demo-site/docs/optional-understanding-hugo/","title":"Optional: Intro to Hugo","section":"Docs","content":"\rUnderstanding Hugo and static site generators\r#\rThe following information isn\u0026rsquo;t necessary for installing Hugo, but may be interesting for anyone who plans on deepening their understanding of site generators and what\u0026rsquo;s happening in the backend.\nHugo is a static site generator (abbreviated SSG), meaning it creates web pages with fixed, hard-coded (hence static) content that will not change unless the source code is changed. Each page on a static site is represented by an .html file on the server, and any given page will look the same to every person who accesses it.\nIn comparison, dynamic site generators (such as Wordpress) rely on server-side languages and databases to display varying content in real time. This content can change based on different factors, such as time of day when the site is accessed or user interactions. The custom \u0026ldquo;For You\u0026rdquo; page on social media sites like X or Instagram, for example, are dynamic pages.\nSSGs like Hugo work by converting plain text files to static site assets (HTML, CSS, or JavaScript files) using a template. When accessing a static site, the resulting web page is pre-rendered, cached, and served to the user. This results in faster load times, improved security (no dynamic content or databases that could be hacked), and less maintenance required.\nWith that high-level overview out of the way, let\u0026rsquo;s get started on using Hugo to create your own static site.\n"},{"id":1,"href":"/demo-site/docs/creating-your-hugo-site/","title":"Creating Your Hugo Site","section":"Docs","content":"\rCreating Your Hugo Site\r#\rThis section will cover how to create a new GitHub repository, how to structure your local file directory for Hugo, and how to manually download and install Hugo.\nStep 1: Set up your Hugo file directory\r#\rBefore installing Hugo, you\u0026rsquo;ll need to prepare the file directory for your site. Create a folder named bin in your user directory with the file path C:\\Users\\YOUR_USERNAME\\bin. Then, add this new bin folder to your system\u0026rsquo;s PATH environment variable now so that when you run Hugo commands later, you won\u0026rsquo;t have to specify the entire path every time.\nWhenever you edit your PATH, however, it\u0026rsquo;s recommended to first create a backup:\nNavigate to System Properties -\u0026gt; Advanced system settings -\u0026gt; Advanced tab -\u0026gt; Environment Variables. Select the PATH variable under \u0026ldquo;System Variables.\u0026rdquo; Click \u0026ldquo;Edit,\u0026rdquo; then \u0026ldquo;Edit text.\u0026rdquo; Copy the entire value in \u0026ldquo;Variable value\u0026rdquo; and paste it into a text file editor such as Notepad. Save the file. If you need to restore the PATH, you can copy+paste the text back into the \u0026ldquo;Variable value.\u0026rdquo; Now that your PATH is backed up, open the command line as administrator. To add your newly-created bin folder to the PATH, run the following: setx PATH \u0026quot;C:\\Users\\YOUR_USERNAME\\bin;%PATH%\u0026quot;. You can check if the directory was added successfully by running echo %PATH%, which will output the full value.\nStep 2: Download and install Hugo\r#\rNow that you\u0026rsquo;ve created the directory for Hugo, it\u0026rsquo;s time to actually download and install it. There are two main ways to install Hugo:\nUse a package manager such as Chocolatey or Scoop to handle the whole installation process for you Manually download and install Hugo from the official Github repository To minimize the amount of programs you need to deal with, this guide will only cover the manual installation method. For a comprehensive step-by-step guide on installing Hugo via a package manager, Bryce Wray has a great writeup on his site.\nNote: When downloading Hugo, it\u0026rsquo;s almost always recommended to get the extended version.\nDownload the extended version of Hugo from the repository and extract its contents. Then move the hugo.exe file to the bin folder you created in the previous step.\nStep 3: Check that your installation was successful\r#\rTo confirm that Hugo is now in the PATH, run the following in the command line: hugo version. The output should show the version of Hugo you installed.\nHere\u0026rsquo;s an example output:\nhugo v0.142.0-1f746a872442e66b6afd47c8c04ac42dc92cdb6f+extended windows/amd64 BuildDate=2025-01-22T12:20:52Z VendorInfo=gohugoio Step 4: Initialize your Hugo site\r#\rNow that Hugo is installed, you can start creating your new website. In this tutorial we\u0026rsquo;ll call the new site demo-site, but you can name it however you like.\nTo create your Hugo site, open Git and run the following: hugo new site demo-site.\nIf the site is created successfully, you\u0026rsquo;ll get a message instructing you to install a theme as your next step.\nPS C:\\Users\\Username\u0026gt; hugo new site demo-site Congratulations! Your new Hugo site was created in C:\\Users\\Username\\demo-site. Just a few more steps... 1. Change the current directory to C:\\Users\\Username\\demo-site. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. Next navigate to your newly-created directory, initialize an empty Git repository, and make a commit. This allows Git to start tracking your changes and also sets things up for installing a theme later:\ncd demo-site git init git add . git commit -m \u0026#34;Adding site to Git\u0026#34; Testing your site\r#\rTo check if your site has been initialized properly, navigate to your newly-created directory in your console and run hugo server to build your site and run it locally. You can then view your site at http://localhost:1313.\nCongratulations, you\u0026rsquo;ve officially created your first Hugo site! Right now it\u0026rsquo;s basically a blank canvas \u0026ndash; let\u0026rsquo;s add some pizzazz to it by installing a theme. To learn how to do so, proceed to the next section, Installing a Theme.\n"},{"id":2,"href":"/demo-site/docs/installing-a-theme/","title":"Installing a Theme","section":"Docs","content":"\rInstalling a Theme\r#\rThemes are a quick and easy way for new Hugo users to make their sites look nice without needing any deep programming or design knowledge. Some awesome members of the Hugo community have created free themes for all kinds of purposes; you can browse a list of popular Hugo themes here. The theme used in this tutorial is called \u0026ldquo;Hugo Book,\u0026rdquo; and can be found here.\nThere are two main ways to install your Hugo theme. Some people recommend cloning the repository for your desired theme into your \u0026ldquo;Themes\u0026rdquo; folder with git clone theme-repository.git. For this tutorial we\u0026rsquo;ll instead be using git submodules, which will add the theme repository as a subdirectory within your Hugo site repository. This avoids potential problems down the line in case you decide you\u0026rsquo;d like to host your website on a different platform (like Netlify) instead.\nTo start, make sure you\u0026rsquo;re in the root directory for your Hugo site in Git. Then use the git submodule command to add the theme repository.\ngit submodule add https://github.com/alex-shpak/hugo-book.git themes/hugo-book Configuring Your Theme\r#\rNext, set your theme as Hugo Book in your site\u0026rsquo;s configuration file, hugo.toml. This config file should have been automatically generated when you created your site. You can use the following command in Git:\necho \u0026#34;theme = \u0026#39;Hugo Book\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml For the site to be hosted on GitHub Pages later on, configure Hugo so that it publishes the site files into a directory called \\docs instead of the default \\public. To do so, open the hugo.toml file and add the following line:\npublishDir = \u0026#39;docs\u0026#39; Since by default GitHub expects pages to be built with Jekyll, you\u0026rsquo;ll also have to specify not to do that by adding a file called \u0026ldquo;nojekyll\u0026rdquo; in your directory root. To create the file using your terminal, run:\ntouch .nojekyll For additional site configuration settings, you can copy the hugo.toml file from the example site for your chosen theme and update the values according to your own preferences. Typically theme authors will include a full list of possible parameters in the documentation, so don\u0026rsquo;t be afraid to experiment with customizing your site!\nHere is what the hugo.toml file for this site looks like:\nbaseURL = \u0026#39;https://example.org/\u0026#39;\rlanguageCode = \u0026#39;en-us\u0026#39;\rtitle = \u0026#39;Demo Hugo Site\u0026#39;\rtheme = \u0026#39;hugo-book\u0026#39;\rpublishDir = \u0026#39;docs\u0026#39;\r[params]\rBookTheme = \u0026#39;auto\u0026#39;\rsectionPagesMenu = \u0026#39;main\u0026#39; For this site, I added the BookTheme and sectionPagesMenu parameters under the [params] header.\nBookTheme: Sets the site to either dark, light, or auto (i.e. follows your browser/OS preferences) mode sectionPagesMenu: Automatically creates an item in the menu for every section of the site (i.e. every top-level folder under the content folder) For a full list of parameters available with the Hugo Book theme, check out the documentation.\nWith your slick new theme installed, let\u0026rsquo;s add some actual content to your site. You\u0026rsquo;ll learn how to do that in the next section, Adding Content Pages\n"},{"id":3,"href":"/demo-site/docs/adding-content-pages/","title":"Adding Content Pages","section":"Docs","content":"\rCreating a Home Page\r#\rFor our very first addition to the site, let\u0026rsquo;s add an index page. This is the first page users will see when they visit your site. New pages can be added to your Hugo site with this command:\nhugo new content content/_index.md This creates the _index.md Markdown file within the \u0026ldquo;content\u0026rdquo; folder of your Hugo directory. If you open the file in an editor, you\u0026rsquo;ll see that it contains some editable metadata:\n+++ date = \u0026#39;2020-02-02T20:20:20-02:00\u0026#39; draft = true title = \u0026#39;Welcome!\u0026#39; +++ You can add body text after this metadata section; however, note that the draft = true value means that Hugo will not publish the page when you build the site. When you\u0026rsquo;re done making your changes, remember to change the value of draft to false so users can actually see the page.\nFor a full list of parameters that can be used in the front matter, refer to the official documentation for the Hugo Book theme under the \u0026ldquo;Configuration\u0026rdquo; section.\nThe front matter for the home page of this site looks like this:\n+++ date = \u0026#39;2025-02-06T17:00:38-08:00\u0026#39; title = \u0026#39;Welcome to my demo site!\u0026#39; BookSection = \u0026#39;docs\u0026#39; +++ Additional Content Pages\r#\rThe above process can be repeated to create additional pages in your site. The sections of this site, for example, consist of a series of folders nested under the /content/docs folder. Each subfolder contains an _index.md file that makes up the written content for each page.\nThe resulting content tree looks like this:\ncontent ├── docs │ ├── optional-understanding-hugo │ │ ├── _index.md │ ├── creating-your-hugo-site │ │ ├── _index.md │ └── installing-a-theme │ │ ├── _index.md │ └── adding-content-pages │ │ ├── _index.md │ └── getting-your-site-online │ │ ├── _index.md │ └── misc-formatting │ ├── _index.md └── _index.md If you don\u0026rsquo;t want a page to appear in the sidebar, you can specify that in the front matter with the toc_hide flag:\ntoc_hide: true One thing to note about page names and how they\u0026rsquo;re reflected in the site URL \u0026ndash; when Hugo finds an index.md file it will use the name of its container folder as the post name. If a Markdown file is named anything other than index.md, that will be the post name. This means each of the following will render different:\n/content/docs/example1/_index.md will render as baseurl.com/docs/example1/ /content/docs/example2.md will render as baseurl.com/docs/example2/ /content/docs/example3/test.md will render as baseurl.com/docs/test/ If you want your URLs to follow a certain format, keep these differences in mind when organizing and naming folders in your directory.\nAt this point you\u0026rsquo;ve created your Hugo site, installed a theme, and added content. Now it\u0026rsquo;s time for the final step \u0026ndash; Getting Your Site Online.\n"},{"id":4,"href":"/demo-site/docs/getting-your-site-online/","title":"Getting Your Site Online","section":"Docs","content":"\rUploading Your Site Via GitHub Pages\r#\rSo you\u0026rsquo;ve finished building your site locally, and now you\u0026rsquo;re ready to deploy it for all the world to see. There are a whole host of ways you can do so \u0026ndash; check out all the ways listed on the Hugo site here \u0026ndash; but for this tutorial, we\u0026rsquo;re using GitHub Pages. This is a free option that eliminates the need to buy a custom domain. On top of that everything can be done using Git Bash, which you should already have some familiarity with if you\u0026rsquo;ve followed the tutorial up to this point.\nStep 1: Initialize Your Site in Git\r#\rIn Git, navigate to your site directory. Then run the following:\ngit init\rgit add .\rgit commit -m \u0026#34;Adding site to Git\u0026#34; This creates an empty Git repository in your site directory and tells Git to start tracking your files.\nStep 2: Create and Link a GitHub Repository\r#\rTo host your site on GitHub Pages you\u0026rsquo;ll need a repository to store it. Log in to your GitHub account and click the + icon in the top right, then select \u0026ldquo;New Repository.\u0026rdquo; Give your repository the same name as your local Hugo directory \u0026ndash; i.e., if the folder containing your site files is called \u0026ldquo;Example Site,\u0026rdquo; the corresponding repository on GitHub should also be called \u0026ldquo;Example Site.\u0026rdquo; Also set the repository to \u0026ldquo;public\u0026rdquo; and uncheck the box for \u0026ldquo;Add a README file\u0026rdquo; before creating it.\nOnce your repository is created, GitHub will display an HTML link that ends in .git. Copy that link. Now you can link the repository you just created on GitHub to your local one with the following Git command, replacing the HTML link with the one you copied:\ngit remote add origin https://github.com/yourusername/repo-name.git Additionally, you may need to rename your branch from \u0026ldquo;master\u0026rdquo; to \u0026ldquo;main\u0026rdquo; to match GitHub\u0026rsquo;s default directory structure:\ngit branch -M main Step 3: Update and Push Your Site\r#\rOpen the Hugo config file in your local directory and replace the default baseURL value with the URL for your site. Since this will be a project page and not a user page, it should look something like baseURL = 'https://username.github.io/site-name/'.\nSave and commit your changes and run the hugo command to build the latest version of your site. When your site is finalized locally, you can push it to GitHub:\ngit push -u origin main Step 4: Finalize Your Site\r#\rAlmost done! Access your GitHub repository online and go to Settings \u0026gt; Pages. Under \u0026ldquo;Source\u0026rdquo; select \u0026ldquo;Deploy from a branch,\u0026rdquo; then select \u0026ldquo;main\u0026rdquo; and \u0026ldquo;/docs\u0026rdquo; under \u0026ldquo;Branch.\u0026rdquo; Save your changes, and GitHub should now indicate that it\u0026rsquo;s serving your website from the \u0026ldquo;main\u0026rdquo; branch.\nCongratulations, you now have a working static site hosted on GitHub Pages! Your site should be accessible at https://yourusername.github.io/site-name.\nWith just this basic Hugo and Git knowledge under your belt, you\u0026rsquo;re ready to create some truly amazing webpages to show off your content. Thank you for reading this far! If you\u0026rsquo;d like to learn some formatting tips for making your site look pretty, check out the Misc Formatting section for tips. Otherwise, to learn more about me and my projects, check out my personal page.\nBonus: How to Update Your Site in the Future\r#\rYou can easily make changes to your site even after it\u0026rsquo;s been published on GitHub Pages. The process essentially just involves repeating the last few steps you did to deploy it in the first place:\nAdd and commit your changes locally Run hugo to rebuild the site git push to the remote repository After that, your changes should be reflected online shortly.\n"},{"id":5,"href":"/demo-site/docs/misc-formatting/","title":"Basic Formatting","section":"Docs","content":"Now that you know how to create a Hugo site and add pages to it, you\u0026rsquo;ve got the fundamentals down! Below are some more advanced steps to help you customize your site:\nConfiguring the menu\r#\rThe Book theme used for this site automatically generates a navigation menu on the left side of the site. By default sections in this menu are ordered alphabetically based on the title assigned in the front matter, but you can manually specify the order by using page weights.\nThe weight parameter for a page determines its order in a collection when sorted by weight. Pages with \u0026ldquo;lighter\u0026rdquo; (i.e. smaller) weights will appear at the top, while those with \u0026ldquo;heavier\u0026rdquo; or unassigned weights will appear at the bottom of the list. Page weights are assigned in the front matter and can be any non-zero integer.\nSince each page in this demo site represents a step in a process, they need to be arranged in the menu in chronological order. To do so, add a weight parameter in the front matter of each index page. For ease of understanding, I\u0026rsquo;ve used multiples of 10 for each page weight. Below is an example of what the front matter looks like for the very first section in this site:\ndate = \u0026#39;2025-02-06T17:00:38-08:00\u0026#39;\rtitle = \u0026#39;Optional: Understanding Hugo\u0026#39;\rBookSection = \u0026#39;docs\u0026#39;\rweight = 10 Setting light or dark mode\r#\rDepending on the theme you use for your Hugo site, you may have the option to change between light and dark modes. The Hugo Book theme has this functionality, along with an additional option to set the theme mode automatically based on a user\u0026rsquo;s browser or device settings. The specific method for setting the theme mode will vary depending on the theme, but for Hugo Book it\u0026rsquo;s done with the BookTheme parameter:\nbaseURL = \u0026#39;https://example.org/\u0026#39;\rlanguageCode = \u0026#39;en-us\u0026#39;\rtitle = \u0026#39;Demo Hugo Site\u0026#39;\rtheme = \u0026#39;hugo-book\u0026#39;\rpublishDir = \u0026#34;docs\u0026#34;\r[params]\rBookTheme = \u0026#39;auto\u0026#39;\rsectionPagesMenu = \u0026#39;main\u0026#39; If you want to change the look of your site, refer to the documentation for your chosen theme to see if there are any handy built-in parameters you can use to easily make changes.\nLinking to other sections of the site\r#\rTo make navigation easier for readers, many of the pages in this site include links to the next section they should read. To cross-reference other sections or pages in your site within the body text of a page, you can use either the ref or relref shortcodes. The only difference between the two is whether the resulting URL is absolute (e.g. http://example.com/about) or relative to the current page (e.g. /about/).\nThe syntax for ref and relref is as follows:\n{{\u0026lt; ref \u0026#34;example.md\u0026#34; \u0026gt;}}\r{{\u0026lt; ref \u0026#34;#anchor\u0026#34; \u0026gt;}}\r{{\u0026lt; ref \u0026#34;example.md#anchor\u0026#34; \u0026gt;}}\r{{\u0026lt; relref \u0026#34;example.md\u0026#34; \u0026gt;}}\r{{\u0026lt; relref \u0026#34;#anchor\u0026#34; \u0026gt;}}\r{{\u0026lt; relref \u0026#34;example.md#anchor\u0026#34; \u0026gt;}} ref and relref can also be used in with Markdown to to create a hyperlinks. A hyperlink that references the \u0026ldquo;Creating Your Hugo Site\u0026rdquo; page, for example, would look like the following in Markdown:\n[Creating Your Hugo Site](https://ebikatsudon.github.io/demo-site/docs/creating-your-hugo-site/ \u0026#34;Creating Your Hugo Site\u0026#34;) One caveat is that you cannot reference _index.md files this way \u0026ndash; instead, the path must point to the folder it is in. So if I wanted to create a link to the home page of this site, I would instead use this:\n[This is a link to the home page](https://ebikatsudon.github.io/demo-site/docs/ \u0026#34;Home Page\u0026#34;) "}]